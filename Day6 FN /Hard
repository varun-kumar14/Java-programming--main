import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class TrieNode {
    Map<Character, TrieNode> children = new HashMap<>();
    boolean isEndOfWord = false;
}

public class ClubbedWordsFinder {

    private TrieNode root = new TrieNode();

    public List<String> findClubbedWords(String[] words) {
        List<String> result = new ArrayList<>();

        // Build the Trie with the given words
        for (String word : words) {
            insertWord(word);
        }

        // Check if each word can be formed by concatenating other words in the list
        for (String word : words) {
            if (canFormClubbedWord(word, 0, 0)) {
                result.add(word);
            }
        }

        return result;
    }

    private void insertWord(String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            node.children.putIfAbsent(ch, new TrieNode());
            node = node.children.get(ch);
        }
        node.isEndOfWord = true;
    }

    private boolean canFormClubbedWord(String word, int start, int count) {
        TrieNode node = root;
        int n = word.length();

        for (int i = start; i < n; i++) {
            char ch = word.charAt(i);
            if (!node.children.containsKey(ch)) {
                return false;
            }

            node = node.children.get(ch);

            if (node.isEndOfWord) {
                if (i == n - 1) {
                    return count >= 1; // Avoid self-matching
                }

                // Recursively check the remaining part of the word
                if (canFormClubbedWord(word, i + 1, count + 1)) {
                    return true;
                }
            }
        }

        return false;
    }

    public static void main(String[] args) {
        ClubbedWordsFinder finder = new ClubbedWordsFinder();
        String[] inputWords = {"mat", "mate", "matbellmates", "bell", "bellmatesbell", "butterribbon", "butter", "ribbon"};
        List<String> outputClubbedWords = finder.findClubbedWords(inputWords);

        // Print the result
        System.out.println(outputClubbedWords);
    }
}
